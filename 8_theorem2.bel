% We now prove that, given two processes P and Q involved in a reduction (P red Q), then there exists a process Q'
% such that P steps into Q' through tau and Q is congruent to Q' (overall, fstepcong P P f_tau Q holds).
% We obtain the result by rewriting the processes P and Q up to congruence in a canonic way (red_rew P Q)
% and stating a lemma which unfolds the type red_rew and reaches the conclusion.

rec red_rew_impl_fstepcong: (g:ctx) [g ⊢ red_rew P Q] → [g ⊢ fstepcong P P f_tau Q] =
/ total d1 (red_rew_impl_fstepcong _ _ _ d1)/
fn d1 ⇒ case d1 of
  | [g ⊢ red_base C1 C2] ⇒ let [g ⊢ D2] = cong_fstepright_impl_fstepleft [g ⊢ C1] [g ⊢ fs_par1 (fs_com1 fs_out bs_in)] in
			   let [g ⊢ fsc F1 C3] = [g ⊢ D2] in [g ⊢ fsc F1 (c_trans C2 C3)]
  | [g ⊢ red_ind C1 C2 \y.D2[..,y]] ⇒ let [g, z:names ⊢ D3[..,z]] = red_rew_impl_fstepcong [g, z:names ⊢ D2[..,z]] in
				      let [g, z:names ⊢ fsc F1[..,z] C3[..,z]] = [g, z : names ⊢ D3[..,z]] in
				      let [g ⊢ D4] = cong_fstepright_impl_fstepleft [g ⊢ C1] [g ⊢ fs_res \z.F1[..,z]] in
				      let [g ⊢ fsc F2 C4] = [g ⊢ D4] in [g ⊢ fsc F2 (c_trans C2 (c_trans (c_res \z.C3[..,z]) C4))]
;


rec red_impl_fstepcong: (g:ctx) [g ⊢ P red Q] → [g ⊢ fstepcong P P f_tau Q] =
/ total r (red_impl_fstepcong _ _ _ r)/
fn r ⇒ let [g ⊢ D1] = red_impl_red_rew r in
       let [g ⊢ D2] = red_rew_impl_fstepcong [g ⊢ D1] in [g ⊢ D2]
;